server {
    listen 80 default_server; # default_server を付けておくのが作法
    # server_name _; # server_name はIngress側で設定するので、ここでは不要か、あるいは _ で受ける

    # ドキュメントルート (静的ファイルをNginxが配信する場合)
    # root /usr/share/nginx/html/public; # LaravelのpublicディレクトリをNginxが配信する場合のパス例
    # もし全てPHP-FPMに流すなら、rootはLaravelのフロントコントローラがある場所を指すようにするか、
    # try_filesで調整する。ここでは、PHP-FPMに全て流すことを想定した書き方にする。
    root /var/www/html/public; # PHP-FPMコンテナのパスと同じにしておくと、SCRIPT_FILENAMEが解決しやすい

    index index.php index.html;

    client_max_body_size 100M; # 必要に応じて調整

    location / {
        # 最初に静的ファイルを探し、なければindex.phpに渡す
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        try_files $uri =404; # ファイルが存在しない場合は404 (セキュリティ対策)
        fastcgi_split_path_info ^(.+\.php)(/.+)$;

        # ★ Kubernetes上でPHP-FPMサービスを指すように変更！
        # PHP-FPMのサービス名が "laravel-php-fpm-service" で、
        # 同じ名前空間にあるなら、こんな感じ。
        # fastcgi_pass laravel-php-fpm-service:9000;
        # もし、NginxとPHP-FPMが同じPodの別コンテナで、
        # PHP-FPMが9000番ポートで待ち受けてるなら、こう書ける。
        fastcgi_pass 127.0.0.1:9000;

        fastcgi_index index.php;
        include fastcgi_params; # fastcgi_paramsに必要なパラメータが含まれていること

        # SCRIPT_FILENAME は、PHP-FPMコンテナ内のLaravelプロジェクトのパスを指す必要がある。
        # NginxコンテナとPHP-FPMコンテナでファイルシステムのパスが違う場合は注意。
        # もし同じPod内で共有ボリュームを使って同じパス構成にしとけば、このままでいけることが多い。
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;

        # セキュリティのため、クライアントからのProxyヘッダをクリア (推奨)
        fastcgi_param HTTP_PROXY "";
    }

    # .htaccess や .htpasswd ファイルへのアクセスを拒否 (セキュリティ対策)
    location ~ /\.ht {
        deny all;
    }

    # favicon.ico と robots.txt へのアクセスログを無効化 (任意)
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    # エラーページ (任意)
    # error_page 404 /index.php; # 404もLaravelに処理させる場合
}