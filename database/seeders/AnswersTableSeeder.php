<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use App\Models\Post;
use App\Models\User;
use Carbon\Carbon;

class AnswersTableSeeder extends Seeder // ★★★ クラス名を AnswersTableSeeder に変更 ★★★
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // ユーザーIDを取得
        $userIds = User::pluck('id')->toArray();
        if (empty($userIds)) {
            echo "ユーザーが存在しません。UserSeederを先に実行してください。\n";
            return;
        }

        // Q&Aデータ
        $q_and_a_list = [
            [
                'question' => '初めて学ぶのにおすすめのプログラミング言語は何ですか？',
                'answer' => 'こんにちは！初めてでしたら、PythonかJavaScriptがよくおすすめされますね。Pythonは文法が比較的シンプルで読みやすく、JavaScriptはウェブブラウザで結果をすぐ確認できるので、動いている実感を得やすいです。何を作りたいかによっても変わってくるので、目標から逆算するのも良いですよ。',
                'answer_title' => 'Re: おすすめのプログラミング言語',
            ],
            [
                'question' => 'Webアプリ開発に適した言語の選び方を教えてください。（例：Python, Ruby, PHP, JavaScriptなど）',
                'answer' => 'Webアプリ開発の言語選び、悩みますよね。プロジェクトの規模やチームの経験、作りたいものの特性によります。 Python (Django, Flask): サーバーサイドの処理や、機械学習との連携も得意です。 Ruby (Ruby on Rails): 設定より規約を重視する考え方で、スタートアップなどで人気があります。 PHP (Laravel, Symfony): WordPressなどで広く使われていて、情報も豊富です。 JavaScript (Node.js): フロントエンドとサーバーサイドを同じ言語で書けるのが魅力です。 学習コスト、コミュニティの活発さ、将来性なども考慮に入れると良いでしょう。',
                'answer_title' => 'Re: Webアプリ開発言語の選び方',
            ],
            [
                'question' => '機械学習・AI開発を始めたいのですが、どの言語から学ぶべきでしょうか？',
                'answer' => 'AI分野でしたら、現状はPythonが第一候補になることが多いです。TensorFlowやPyTorch、scikit-learnといった強力なライブラリが揃っていて、学習資料やコミュニティも非常に充実しています。統計解析がメインならRも選択肢に入ります。',
                'answer_title' => 'Re: 機械学習・AI開発の言語',
            ],
            [
                'question' => 'Go言語の将来性についてどう思いますか？',
                'answer' => 'Go言語は、並行処理が得意でパフォーマンスも良く、シンプルな文法が特徴です。マイクロサービスやコマンドラインツールの開発などでよく使われていますね。Googleがバックについていることもあり、将来性は明るいと思います。',
                'answer_title' => 'Re: Go言語の将来性',
            ],
            [
                'question' => 'Rustの将来性についてどう思いますか？',
                'answer' => 'Rustは、メモリ安全性が高く、ガベージコレクタなしで高いパフォーマンスを出せるのが魅力です。OS開発や組み込み、WebAssemblyなど、より低レイヤーや性能が求められる分野で注目されています。こちらもコミュニティが活発で、今後ますます重要性が増していく言語だと感じています。',
                'answer_title' => 'Re: Rustの将来性',
            ],
            [
                'question' => '複数の言語を習得するメリットとデメリットを知りたいです。',
                'answer' => '複数の言語を学ぶメリットは、問題解決の選択肢が増えたり、異なる考え方（パラダイム）に触れて視野が広がることですね。もちろん、対応できる仕事の幅も広がります。デメリットとしては、習得に時間がかかることや、広く浅くになりがちな点が挙げられます。最初は一つをある程度深掘りしてから、次の言語に進むのがおすすめです。',
                'answer_title' => 'Re: 複数言語習得のメリット・デメリット',
            ],
            [
                'question' => 'フレームワークやライブラリの選定基準についてアドバイスをお願いします。',
                'answer' => 'フレームワークやライブラリ選び、大事ですよね。選ぶときは、 解決したい課題に合っているか ドキュメントが充実していて、コミュニティが活発か（困ったときに情報を見つけやすいか） 学習コストはどのくらいか パフォーマンスや拡張性は十分か ライセンスは問題ないか などを基準に考えると良いと思います。「流行っているから」だけでなく、自分のプロジェクトに合うかを見極めるのが大切です。',
                'answer_title' => 'Re: フレームワーク・ライブラリの選定基準',
            ],
            [
                'question' => '原因不明のバグに遭遇しています。効果的なデバッグ方法を教えてください。',
                'answer' => 'デバッグ、根気がいりますよね…！試してみてほしいのは、 まずはバグが必ず再現する手順を確立する 問題箇所を特定するために、コードを部分的にコメントアウトしたり、シンプルな状況で試してみる デバッガを使ってステップ実行し、変数の値を確認する 要所にログ出力（printデバッグも有効）を仕込んで、処理の流れや値の変化を追う 「ラバーダッキング」も意外と効果があります。誰かに口頭で説明してみると、頭が整理されて解決策がひらめくことも。 少し時間を置いて、頭をリフレッシュしてから再度取り組むのも有効です。',
                'answer_title' => 'Re: 効果的なデバッグ方法',
            ],
            [
                'question' => 'コードのパフォーマンスが思うように改善しません。ボトルネックの見つけ方や最適化のコツはありますか？',
                'answer' => 'パフォーマンス改善は、まずプロファイラを使って、どこが本当に遅いのか（ボトルネック）を特定することから始めましょう。勘に頼らず、計測が基本です。 アルゴリズムやデータ構造の見直しが効果的な場合が多いです。 データベースアクセスやファイルI/Oなど、外部とのやり取りもボトルネックになりやすい箇所です。 キャッシュの利用も検討してみてください。',
                'answer_title' => 'Re: パフォーマンス改善のコツ',
            ],
            [
                'question' => '大規模プロジェクトでのGitを使ったバージョン管理で、コンフリクトを減らす工夫はありますか？',
                'answer' => '大規模プロジェクトでのGitコンフリクト、悩ましいですよね。 作業前に最新のmain（またはdevelop）ブランチを取り込む（pull --rebaseなど） フィーチャーブランチはなるべく小さく、寿命を短くする 誰がどの部分を修正しているか、チーム内で情報共有を密にする コードの責務を適切に分離し、変更箇所が集中しないようにする などが考えられます。',
                'answer_title' => 'Re: Gitコンフリクト削減の工夫',
            ],
            [
                'question' => 'API連携でエラーが発生し、解決できません。（使用API、エラーコードなど詳細希望）',
                'answer' => '（詳細情報がない前提での一般的なアドバイスですが） APIの公式ドキュメントでエラーコードの意味を確認 リクエストの内容（URL、ヘッダー、ボディ、認証情報など）が正しいか再確認 Postmanのようなツールで、API単体でリクエストを投げてみる リクエストとレスポンスの全てをログに出力して確認 API提供元のステータスページなどで障害情報がないか確認 といったところから切り分けていくと良いかと思います',
                'answer_title' => 'Re: API連携エラーの解決',
            ],
            [
                'question' => 'テストコードの書き方が分からず、品質担保に不安があります。TDDの進め方など教えてほしいです。',
                'answer' => 'テストコード、最初は戸惑いますよね。まずは簡単な関数からユニットテストを書く練習をしてみるのがおすすめです。 「準備(Arrange)・実行(Act)・検証(Assert)」のAAAパターンを意識すると書きやすいです。 TDDは、「失敗するテストを書く → テストを通す最小限のコードを書く → コードとテストをリファクタリングする」というサイクルを繰り返します。 お使いの言語に対応したテストフレームワーク（例：JavaScriptならJest、Pythonならunittestやpytest）のドキュメントも参考にしてみてください。',
                'answer_title' => 'Re: テストコードとTDD',
            ],
            [
                'question' => '既存コードの仕様が複雑で、改修に時間がかかってしまいます。リファクタリングの進め方について相談させてください。',
                'answer' => 'レガシーコードの改修、大変ですよね。リファクタリングを進める上では、 まず、既存の動作を保証するためのテストコードを書く（特に外部から見た振る舞いを変えないように） 一度に大きく変えず、小さな変更を積み重ねていく 変更前後で必ずテストを実行する 可読性を上げる（変数名や関数名を分かりやすくする、長い関数を分割するなど）ことから始めるのがおすすめです。マーチン・ファウラー氏の「リファクタリング」という本も非常に参考になります。',
                'answer_title' => 'Re: リファクタリングの進め方',
            ],
            [
                'question' => '新しい技術のキャッチアップが追いつかず、自分のスキルが陳腐化しないか不安です。',
                'answer' => '技術の進化は速いので、そのお気持ちはよく分かります。 全てを追いかけるのは難しいので、まずはご自身の業務や興味のある分野に絞ってみてはいかがでしょうか。 プログラミングの基礎となる考え方は普遍的なものが多いので、そこをしっかり押さえておくのも大切です。 毎日少しずつでも情報収集の時間を作る、実際に手を動かして試してみる、といった習慣が力になると思います。',
                'answer_title' => 'Re: 技術キャッチアップの不安',
            ],
            [
                'question' => '開発プロジェクトの納期が厳しく、プレッシャーを感じています。メンタルヘルスの保ち方は？',
                'answer' => '厳しい納期、プレッシャーお察しします。 タスクを細かく分解して、一つ一つ終わらせていくことで達成感を得やすくする 意識して休憩を取り、散歩などで気分転換をする 睡眠時間を確保する（無理は禁物です） 一人で抱え込まず、状況をチームや上司に相談することも考えてみてください。 自分なりのリフレッシュ方法を見つけておくのも良いですね。',
                'answer_title' => 'Re: メンタルヘルスの保ち方',
            ],
            [
                'question' => '自分の書いたコードが原因で、本番環境で重大な障害を起こさないか心配です。',
                'answer' => 'その心配は多くの開発者が抱えるものだと思います。完全に無くすのは難しいですが、 テストをしっかり書く（単体テスト、結合テストなど） コードレビューを依頼して他の人の目を通してもらう いきなり本番ではなく、ステージング環境などで十分検証する 段階的なリリースを行う（カナリアリリースなど） といった対策でリスクを低減できます。万が一障害が起きても、そこから学び、次に活かすことが大切です。',
                'answer_title' => 'Re: 本番障害への心配',
            ],
            [
                'question' => 'チームメンバーとの技術的な意見の対立をどう解決すれば良いでしょうか？',
                'answer' => '技術的な議論は活発なチームの証でもありますが、対立すると難しいですよね。 まずはお互いの意見を尊重し、相手の考えをしっかり聞く姿勢が大切です。 感情的にならず、技術的な根拠やデータに基づいて話し合うように心がけましょう。 共通のゴール（より良い製品を作るなど）を再確認するのも良いかもしれません。 どうしても平行線の場合は、第三者（テックリードなど）に意見を求めるのも一つの方法です。',
                'answer_title' => 'Re: 技術的な意見の対立',
            ],
            [
                'question' => '個人開発でアプリをリリースしたいのですが、アイデアが本当に受け入れられるか不安です。',
                'answer' => '個人開発のリリース前、その不安はつきものですよね。 まずはMVP（Minimum Viable Product：実用最小限の製品）を作って、早めにユーザーの反応を見てみるのがおすすめです。 身近な友人やターゲットになりそうな人に試してもらい、フィードバックをもらうのも良いでしょう。 最初から完璧を目指さず、改善を繰り返していくつもりで取り組んでみてはいかがでしょうか。何よりも、ご自身が「作りたい！」という情熱が大切だと思います。',
                'answer_title' => 'Re: 個人開発の不安',
            ],
            [
                'question' => 'プログラミング学習を続けていますが、なかなか実力がついている実感がありません。モチベーション維持のコツは？',
                'answer' => '学習の停滞感、つらいですよね。 小さな目標を立てて、達成感を積み重ねる 学んだことを使って何か動くものを作ってみる（ポートフォリオ作成など） 過去に書いたコードを見返して、自分の成長を客観的に確認する 勉強会やコミュニティに参加して、仲間を作る 誰かに教えるつもりで学んでみる（アウトプットは理解を深めます） 時には思い切って休むことも大事です。焦らず、ご自身のペースで続けていくことが一番ですよ。',
                'answer_title' => 'Re: 学習モチベーション維持',
            ],
        ];


        $answersToInsert = []; // ★★★ 変数名を変更 ★★★
        $now = Carbon::now();

        foreach ($q_and_a_list as $item) {
            $post = Post::where('title', $item['question'])->first();

            if ($post) {
                $answersToInsert[] = [ // ★★★ 変数名を変更 ★★★
                    'title' => $item['answer_title'],
                    'user_id' => $userIds[array_rand($userIds)],
                    'posts_id' => $post->id, // ★★★ カラム名を posts_id に ★★★
                    'body' => $item['answer'],
                    // 'date' => $now, // ★★★ dateカラムは存在しないため削除 ★★★
                    'created_at' => $now,
                    'updated_at' => $now,
                ];
            } else {
                echo "質問「" . $item['question'] . "」に対応する投稿が見つかりませんでした。\n";
            }
        }

        // まとめて挿入
        if (!empty($answersToInsert)) { // ★★★ 変数名を変更 ★★★
            DB::table('answers')->insert($answersToInsert); // ★★★ テーブル名を answers に変更 ★★★
        }
    }
}
